import { z } from 'zod'

export enum ToleranceType {
	INTOL = 'INTOL',
	OUTOL = 'OUTOL',
	NOT_RECOGNIZED = 'NOT_RECOGNIZED'
}

export enum StatisticCriteria {
	POINT_ABOVE_LCS = 'POINT_ABOVE_LCS',
	POINT_BELOW_LCS = 'POINT_BELOW_LCS',
	FIFTEEN_CONSECUTIVE_POINS_IN_ZONE_C = 'FIFTEEN_CONSECUTIVE_POINS_IN_ZONE_C',
	FOURTEEN_CONSECUTIVE_POINTS_ALTERNATING_UP_AND_DOWN = 'FOURTEEN_CONSECUTIVE_POINTS_ALTERNATING_UP_AND_DOWN',
	EIGHT_CONSECURTIVE_POINTS_OUT_OF_ZONE_A = 'EIGHT_CONSECURTIVE_POINTS_OUT_OF_ZONE_A',
	TWO_OUT_OF_THREE_CONSECUTIVE_POINTS_IN_ZONE_A = 'TWO_OUT_OF_THREE_CONSECUTIVE_POINTS_IN_ZONE_A',
	FOUR_OUT_OF_FIVE_CONSECUTIVE_POINTS_OUTSIDE_ZONE_C = 'FOUR_OUT_OF_FIVE_CONSECUTIVE_POINTS_OUTSIDE_ZONE_C',
	NINE_CONSECUTIVE_POINTS_ON_THE_SAME_SIDE_OF_THE_MIDDLE_LINE = 'NINE_CONSECUTIVE_POINTS_ON_THE_SAME_SIDE_OF_THE_MIDDLE_LINE',
	OUT_OF_TOLERANCE = 'OUT_OF_TOLERANCE'
}

export const GraphicMeasurementFmDTO = z.object({
	value: z.number(),
	scanDate: z.string(),
	toleranceType: z.nativeEnum(ToleranceType),
	statisticCriteriaList: z.array(z.nativeEnum(StatisticCriteria))
})
export type IGraphicMeasurementFmDTO = z.infer<typeof GraphicMeasurementFmDTO>
